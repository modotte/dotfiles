#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;;;;  Copyright (c) 2021, Runecroon
;;;;  All rights reserved.
;;;;
;;;;  This source code is licensed under the BSD-style license found in the
;;;;  LICENSE file in the root directory of this source tree.

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(cl-ansi-text
                             dexador
                             yason
                             clavier
                             arrows)
                           :silent t))

(defpackage :ros.script.github-user-emails.3831548189
  (:use :cl)
  (:import-from :cl-ansi-text
                :red)
  (:import-from :yason
                :parse)
  (:import-from :clavier
                :email-validator
                :validate)
  (:import-from :arrows
                :->>))
(in-package :ros.script.github-user-emails.3831548189)

(defun print-error (string)
  (format *error-output*
          "~A~%"
          (concatenate 'string (red "[ERROR] ") string)))

(defun parsed-json (username)
  (let ((raw-json
          (handler-case
              (dexador:get (format nil "https://api.github.com/users/~A/events/public" username))
            (dexador.error:http-request-not-found (error)
              (print-error
               (format nil "~A emails cannot be retrieved. Are you sure if the user exist?" username))
              (print-error (format nil "Exception: ~A" error))
              (uiop:quit 1))
            (usocket:network-unreachable-error (error)
              (print-error "Cannot connect to Github server. Probably Github is down or you are not connected to the internet?")
              (print-error (format nil "Exception: ~A" error))
              (uiop:quit 1))
            (error (error)
              (print-error error)
              (uiop:quit 1)))))
    (parse raw-json)))

(defun main (&rest argv)
  (declare (ignorable argv))

  (when (null (first argv))
    (print-error "Github username argument needed!")
    (format *error-output* "Example: github-user-emails.ros githubusername~%")
    (uiop:quit 1))

  (let* ((username (first argv))
         (validator (make-instance 'email-validator))
         (emails
           (->> (parsed-json username)

                (mapcar #'(lambda (e) (gethash "payload" e)))
                (remove-if-not #'(lambda (e) (gethash "commits" e)))
                (mapcar #'(lambda (e) (gethash "commits" e)))
                (mapcar #'(lambda (e) (gethash "author" (first e))))
                (mapcar #'(lambda (e) (gethash "email" e))))))

    (dolist (email (remove-duplicates emails :test #'string=))
      (when (validate validator email)
        (format t "~A~%" email)))))

;;; vim: set ft=lisp lisp:
